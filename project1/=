#include <string.h> 
#include <stdio.h>
#include <stdlib.h>
#include <fcntl.h> 
#include <errno.h>
#include <pthread.h>
#include <unistd.h>
#include "p1fxns.h"
#include "usps.h"

#define DEFAULT_PROCS 25
#define DEFAULT_ARGS  128
#define BUFF_SIZE     2048

struct proc {
    int *pid;
    int *status;
    char *command_line;
    char **arguments;
    char *program;
}; 
Proc *procs = NULL;
int sprocs = -1;
int nprocs =  0;

static void add_proc(pid, line) {
    if ( sprocs < 0 ) {
        //allocate arroy of proc stucture with size default proc
        Proc* procs = (Proc*)malloc( DEFAULT_PROCS * sizeof( Proc ) );
        sprocs = DEFAULT_PROCS;
    }
    else if ( sprocs <= nprocs ) {
        //reallocate array of proc structure by size of sprocs + DEFAULT PROCS
        sprocs += DEFAULT_PROCS;
        procs = (Proc*)realloc(procs, sprocs * sizeof ( Proc ) );
    }
    //fill in procs[nprocs]
    procs[nprocs].pid = pid;
    procs[nprocs].status = NULL;
    procs[nprocs].command_line = line;

    //printf( "procs[nprocs] pid: %d\n", procs[nprocs].pid );
    nprocs++;
}


Proc *create_proc( ) {
    Proc* process = (Proc*)malloc( sizeof( Proc ) );
   
    process->pid          = NULL;
    process->status       = NULL;
    process->command_line = NULL;
    process->arguments    = NULL;
    process->program      = NULL;

    process->arguments = (char**)malloc( DEFAULT_ARGS * sizeof( char*) );

    return process;
}

void prepare_argument_structure( Proc *process ) {
    int idx, counter = 0;
    char *program, *argument;
    int x;
    
    //p1getword( line, 5, argument );
    //printf( "line is %d long \n", p1strlen( line ) );
    //printf( "Argument 1 is %s\n",  argument );

    //set programs and arguments arrays
    printf("Are we in PAS?/n" );
    if ( idx == 0 ) {
        idx = p1getword( process->command_line, 0 , process->program );
        printf( "program %s\n", process->program );
    

    }
}

//returns a char* with a word at each index of line, 
//while line[i] != NULL keep getting commands
char * get_line( ) {
    char *line = (char *)malloc( BUFF_SIZE * sizeof( char ) );
   

    if ( p1getline(0, line, BUFF_SIZE ) == 0 ) 
        return NULL;
   
    printf("buff = %s\n", line);
    
    return line;
}


int main ( int argc, char* argv[] ) {
    /* Initialize some values at the start */
    int k, i, j, pid;
    char *line;
   
    for ( i = 0; i <= nprocs; i++ ) {
        line = get_line ( ); // always get next line
        if ( line == NULL )
            break;
        Proc *process = create_proc( );
        process->command_line = line;
        pid = fork(); 
        printf( "post fork\n" );
        if ( pid == 0 ) {

            prepare_argument_structure( process );
            //execvp(programs[i], arguments[i] );
        }
        for ( j = 0; j <= nprocs; j++ ) {
            wait( pid );
        }
        //printf( "nprocs: %d\n", nprocs ); 
        //add_proc( process->pid, process->command_line );
        //printf( "nprocs: %d\n", nprocs ); 
    }

    pthread_t tid; /* thread identifier */
    pthread_attr_t attr; /* set of thread attributes */


    /* check only one file is inputed 
    if ( argc != 2 ) {
        printf( "usage error: should be ./<name of exec> file1" );
        exit(EXIT_FAILURE);
    }
    */
}
